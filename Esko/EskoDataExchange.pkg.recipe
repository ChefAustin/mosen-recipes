<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Description</key>
    <string>
    Modify pre/post scripts to remove reference to AppleScript alert dialogs and use exit status only.
    This will make package installation compatible with a silent workflow.

    You must register to receive the download URL legitimately.
    </string>
    <key>Identifier</key>
    <string>com.github.mosen.pkg.EskoDataExchange</string>
    <key>Input</key>
    <dict>
        <key>NAME</key>
        <string>Esko Data Exchange</string>
    </dict>
    <key>MinimumVersion</key>
    <string>0.2.0</string>
    <key>ParentRecipe</key>
    <string>com.github.mosen.download.EskoDataExchange</string>
    <key>Process</key>
    <array>
       <dict>
            <key>Processor</key>
            <string>Copier</string>
            <key>Arguments</key>
            <dict>
                <key>source_path</key>
                <string>%pathname%/Esko Data Exchange.mpkg</string>
                <key>destination_path</key>
                <string>%RECIPE_CACHE_DIR%/%NAME%/Esko Data Exchange.mpkg</string>
                <key>overwrite</key>
                <true/>
            </dict>
        </dict>
        <dict>
            <key>Processor</key>
            <string>Copier</string>
            <key>Arguments</key>
            <dict>
                <key>source_path</key>
                <string>%pathname%/.MacPackages</string>
                <key>destination_path</key>
                <string>%RECIPE_CACHE_DIR%/%NAME%/.MacPackages</string>
                <key>overwrite</key>
                <true/>
            </dict>
        </dict>
        <dict>
            <key>Processor</key>
            <string>FileCreator</string>
            <key>Arguments</key>
            <dict>
                <key>file_path</key>
                <string>%RECIPE_CACHE_DIR%/%NAME%/Esko Data Exchange.mpkg/Contents/Resources/postflight</string>
                <key>file_content</key>
                <string>#!/bin/bash

echo "Post Install/Upgrade Script"
echo "Using cache folder: $INSTALLER_TEMP"

cd "$1/Contents/Resources"
 
"./MACLICENSINGPATCH" 
RESULT1="$?"

# no change done
echo "no change was needed on /etc/sysctl.conf"
if [ $RESULT1 = 0 ]; then exit 0; fi

# a change was made
echo "a change was made to /etc/sysctl.conf"
if [ $RESULT1 = 1 ]; then exit 0; fi

# script has returned an error-code

if [ $RESULT1 = 2 ]; then echo "Failed to create /etc/sysctl.conf"; fi
if [ $RESULT1 = 3 ]; then echo "Failed to open /etc/sysctl.conf for writing"; fi

exit 1
                </string>
            </dict>
        </dict>
        <dict>
            <key>Processor</key>
            <string>FileCreator</string>
            <key>Arguments</key>
            <dict>
                <key>file_path</key>
                <string>%RECIPE_CACHE_DIR%/%NAME%/Esko Data Exchange.mpkg/Contents/Resources/preinstall</string>
                <key>file_content</key>
                <string>#!/bin/bash

echo "Pre Install/Upgrade Script"
echo "Using cache folder: $INSTALLER_TEMP"

cd "$1/Contents/Resources"
 
echo "check if /etc/sysctl.conf contains 'kern.sysv.semume=20'"
"./MACLICENSINGPATCH" -check 
RESULT1="$?"

# no change needed
if [ $RESULT1 = 0 ]; then echo "no change is needed to /etc/sysctl.conf"
exit 0
fi

# a change is needed
if [ $RESULT1 = 1 ]; then echo "a change will be made to /etc/sysctl.conf"

theResult=0

if [ -n "$theResult" ]
then
  if [ $theResult = 2 ]; then exit 0; fi
  if [ $theResult = 1 ]; then echo "The user cancelled the installation"
    exit 1 
  fi
else
  exit 0
fi
fi


# script has returned an error-code

if [ $RESULT1 = 2 ]; then echo "Failed to create /etc/sysctl.conf"; fi
if [ $RESULT1 = 3 ]; then echo "Failed to open /etc/sysctl.conf for writing"; fi

exit 1

                </string>
            </dict>
        </dict>
        <dict>
            <key>Processor</key>
            <string>FileCreator</string>
            <key>Arguments</key>
            <dict>
                <key>file_path</key>
                <string>%RECIPE_CACHE_DIR%/%NAME%/Esko Data Exchange.mpkg/Contents/Resources/preupgrade</string>
                <key>file_content</key>
                <string>#!/bin/bash

echo "Pre Install/Upgrade Script"
echo "Using cache folder: $INSTALLER_TEMP"

cd "$1/Contents/Resources"
 
echo "check if /etc/sysctl.conf contains 'kern.sysv.semume=20'"
"./MACLICENSINGPATCH" -check 
RESULT1="$?"

# no change needed
if [ $RESULT1 = 0 ]; then echo "no change is needed to /etc/sysctl.conf"
exit 0
fi

# a change is needed
if [ $RESULT1 = 1 ]; then echo "a change will be made to /etc/sysctl.conf"

theResult=0

if [ -n "$theResult" ]
then
  if [ $theResult = 2 ]; then exit 0; fi
  if [ $theResult = 1 ]; then echo "The user cancelled the installation"
    exit 1 
  fi
else
  exit 0
fi
fi


# script has returned an error-code

if [ $RESULT1 = 2 ]; then echo "Failed to create /etc/sysctl.conf"; fi
if [ $RESULT1 = 3 ]; then echo "Failed to open /etc/sysctl.conf for writing"; fi

exit 1

                </string>
            </dict>
        </dict>
        <dict>
            <key>Processor</key>
            <string>FileCreator</string>
            <key>Arguments</key>
            <dict>
                <key>file_path</key>
                <string>%RECIPE_CACHE_DIR%/%NAME%/.MacPackages/Esko Data Exchange.pkg/Contents/Resources/postinstall</string>
                <key>file_content</key>
                <string>#!/bin/bash

echo "Post Install/Upgrade Script"
echo "Using cache folder: $INSTALLER_TEMP"

"/System/Library/CoreServices/FixupResourceForks" -q "$2"

"$1/Contents/Resources/DTPScript" -debug1 -c "$INSTALLER_TEMP" -AI15 "$2"
RESULTAI15="$?"
echo "RESULTAI15 = $RESULTAI15"

"$1/Contents/Resources/DTPScript" -debug1 -c "$INSTALLER_TEMP" -AI151 "$2"
RESULTAI151="$?"
echo "RESULTAI151 = $RESULTAI151"

"$1/Contents/Resources/DTPScript" -debug1 -c "$INSTALLER_TEMP" -AI16 "$2"
RESULTAI16="$?"
echo "RESULTAI16 = $RESULTAI16"

"$1/Contents/Resources/DTPScript" -debug1 -c "$INSTALLER_TEMP" -AI17 "$2"
RESULTAI17="$?"
echo "RESULTAI17 = $RESULTAI17"

# Check if the scripts return a serious error-code
if [ $RESULTAI15 = 1 ]; then exit 1; fi
if [ $RESULTAI151 = 1 ]; then exit 1; fi
if [ $RESULTAI16 = 1 ]; then exit 1; fi
if [ $RESULTAI17 = 1 ]; then exit 1; fi

if [ $RESULTAI15 = 3 ]; then exit 1; fi
if [ $RESULTAI151 = 3 ]; then exit 1; fi
if [ $RESULTAI16 = 3 ]; then exit 1; fi
if [ $RESULTAI17 = 3 ]; then exit 1; fi

if [ $RESULTAI15 = 4 ]; then exit 1; fi
if [ $RESULTAI151 = 4 ]; then exit 1; fi
if [ $RESULTAI16 = 4 ]; then exit 1; fi
if [ $RESULTAI17 = 4 ]; then exit 1; fi

# Check if the scripts could find at least one compatible Illustrator/Photoshop version (For this we have a GUI alert box ready)

if [ $[RESULTAI15 * RESULTAI151 * RESULTAI16 * RESULTAI17] != 0 ]; then exit 1; fi

chmod -R 777 /Users/Shared/EskoArtwork
exit 0
                </string>
            </dict>
        </dict>
        <dict>
            <key>Processor</key>
            <string>FileCreator</string>
            <key>Arguments</key>
            <dict>
                <key>file_path</key>
                <string>%RECIPE_CACHE_DIR%/%NAME%/.MacPackages/Esko Data Exchange.pkg/Contents/Resources/postupgrade</string>
                <key>file_content</key>
                <string>#!/bin/bash

echo "Post Install/Upgrade Script"
echo "Using cache folder: $INSTALLER_TEMP"

"/System/Library/CoreServices/FixupResourceForks" -q "$2"

"$1/Contents/Resources/DTPScript" -debug1 -c "$INSTALLER_TEMP" -AI15 "$2"
RESULTAI15="$?"

"$1/Contents/Resources/DTPScript" -debug1 -c "$INSTALLER_TEMP" -AI151 "$2"
RESULTAI151="$?"

"$1/Contents/Resources/DTPScript" -debug1 -c "$INSTALLER_TEMP" -AI16 "$2"
RESULTAI16="$?"

"$1/Contents/Resources/DTPScript" -debug1 -c "$INSTALLER_TEMP" -AI17 "$2"
RESULTAI17="$?"

# Check if the scripts return a serious error-code
if [ $RESULTAI15 = 1 ]; then exit 1; fi
if [ $RESULTAI151 = 1 ]; then exit 1; fi
if [ $RESULTAI16 = 1 ]; then exit 1; fi
if [ $RESULTAI17 = 1 ]; then exit 1; fi

if [ $RESULTAI15 = 3 ]; then exit 1; fi
if [ $RESULTAI151 = 3 ]; then exit 1; fi
if [ $RESULTAI16 = 3 ]; then exit 1; fi
if [ $RESULTAI17 = 3 ]; then exit 1; fi

if [ $RESULTAI15 = 4 ]; then exit 1; fi
if [ $RESULTAI151 = 4 ]; then exit 1; fi
if [ $RESULTAI16 = 4 ]; then exit 1; fi
if [ $RESULTAI17 = 4 ]; then exit 1; fi

# Check if the scripts could find at least one compatible Illustrator/Photoshop version (For this we have a GUI alert box ready)

if [ $[RESULTAI15 * RESULTAI151 * RESULTAI16 * RESULTAI17] != 0 ]; then exit 1; fi

chmod -R 777 /Users/Shared/EskoArtwork
exit 0
                </string>
            </dict>
        </dict> 
        <dict>
            <key>Processor</key>
            <string>FileCreator</string>
            <key>Arguments</key>
            <dict>
                <key>file_path</key>
                <string>%RECIPE_CACHE_DIR%/%NAME%/.MacPackages/Licensing.pkg/Contents/Resources/postinstall</string>
                <key>file_content</key>
                <string>#!/bin/bash

echo "Post Install/Upgrade Script"
echo "Using cache folder: $INSTALLER_TEMP"

"/System/Library/CoreServices/FixupResourceForks" -q "$2"

"$1/Contents/Resources/DTPScript" -debug1 -c "$INSTALLER_TEMP" -AI15 "$2"
RESULTAI15="$?"
echo "RESULTAI15 = $RESULTAI15"

"$1/Contents/Resources/DTPScript" -debug1 -c "$INSTALLER_TEMP" -AI151 "$2"
RESULTAI151="$?"
echo "RESULTAI151 = $RESULTAI151"

"$1/Contents/Resources/DTPScript" -debug1 -c "$INSTALLER_TEMP" -AI16 "$2"
RESULTAI16="$?"
echo "RESULTAI16 = $RESULTAI16"

"$1/Contents/Resources/DTPScript" -debug1 -c "$INSTALLER_TEMP" -AI17 "$2"
RESULTAI17="$?"
echo "RESULTAI17 = $RESULTAI17"

# Check if the scripts return a serious error-code
if [ $RESULTAI15 = 1 ]; then exit 1; fi
if [ $RESULTAI151 = 1 ]; then exit 1; fi
if [ $RESULTAI16 = 1 ]; then exit 1; fi
if [ $RESULTAI17 = 1 ]; then exit 1; fi

if [ $RESULTAI15 = 3 ]; then exit 1; fi
if [ $RESULTAI151 = 3 ]; then exit 1; fi
if [ $RESULTAI16 = 3 ]; then exit 1; fi
if [ $RESULTAI17 = 3 ]; then exit 1; fi

if [ $RESULTAI15 = 4 ]; then exit 1; fi
if [ $RESULTAI151 = 4 ]; then exit 1; fi
if [ $RESULTAI16 = 4 ]; then exit 1; fi
if [ $RESULTAI17 = 4 ]; then exit 1; fi

# Check if the scripts could find at least one compatible Illustrator/Photoshop version (For this we have a GUI alert box ready)

if [ $[RESULTAI15 * RESULTAI151 * RESULTAI16 * RESULTAI17] != 0 ]; then exit 1; fi

exit 0
                </string>
            </dict>
        </dict>
       <dict>
            <key>Processor</key>
            <string>FileCreator</string>
            <key>Arguments</key>
            <dict>
                <key>file_path</key>
                <string>%RECIPE_CACHE_DIR%/%NAME%/.MacPackages/Licensing.pkg/Contents/Resources/postupgrade</string>
                <key>file_content</key>
                <string>#!/bin/bash

echo "Post Install/Upgrade Script"
echo "Using cache folder: $INSTALLER_TEMP"

"/System/Library/CoreServices/FixupResourceForks" -q "$2"

"$1/Contents/Resources/DTPScript" -debug1 -c "$INSTALLER_TEMP" -AI15 "$2"
RESULTAI15="$?"
echo "RESULTAI15 = $RESULTAI15"

"$1/Contents/Resources/DTPScript" -debug1 -c "$INSTALLER_TEMP" -AI151 "$2"
RESULTAI151="$?"
echo "RESULTAI151 = $RESULTAI151"

"$1/Contents/Resources/DTPScript" -debug1 -c "$INSTALLER_TEMP" -AI16 "$2"
RESULTAI16="$?"
echo "RESULTAI16 = $RESULTAI16"

"$1/Contents/Resources/DTPScript" -debug1 -c "$INSTALLER_TEMP" -AI17 "$2"
RESULTAI17="$?"
echo "RESULTAI17 = $RESULTAI17"

# Check if the scripts return a serious error-code
if [ $RESULTAI15 = 1 ]; then exit 1; fi
if [ $RESULTAI151 = 1 ]; then exit 1; fi
if [ $RESULTAI16 = 1 ]; then exit 1; fi
if [ $RESULTAI17 = 1 ]; then exit 1; fi

if [ $RESULTAI15 = 3 ]; then exit 1; fi
if [ $RESULTAI151 = 3 ]; then exit 1; fi
if [ $RESULTAI16 = 3 ]; then exit 1; fi
if [ $RESULTAI17 = 3 ]; then exit 1; fi

if [ $RESULTAI15 = 4 ]; then exit 1; fi
if [ $RESULTAI151 = 4 ]; then exit 1; fi
if [ $RESULTAI16 = 4 ]; then exit 1; fi
if [ $RESULTAI17 = 4 ]; then exit 1; fi

# Check if the scripts could find at least one compatible Illustrator/Photoshop version (For this we have a GUI alert box ready)

if [ $[RESULTAI15 * RESULTAI151 * RESULTAI16 * RESULTAI17] != 0 ]; then exit 1; fi

exit 0
                </string>
            </dict>
        </dict>
        <dict>
            <key>Processor</key>
            <string>DmgCreator</string>
            <key>Arguments</key>
            <dict>
                <key>dmg_root</key>
                <string>%RECIPE_CACHE_DIR%/%NAME%</string>
                <key>dmg_path</key>
                <string>%RECIPE_CACHE_DIR%/%NAME%.dmg</string>
            </dict>
        </dict>
    </array>
</dict>
</plist>
